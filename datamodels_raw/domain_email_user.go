// Code generated by SQLBoiler 4.12.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package datamodels_raw

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DomainEmailUser is an object representing the database table.
type DomainEmailUser struct {
	DomainID          string     `boil:"domain_id" json:"domain_id" toml:"domain_id" yaml:"domain_id"`
	BaseAddress       string     `boil:"base_address" json:"base_address" toml:"base_address" yaml:"base_address"`
	EncryptedPassword null.Bytes `boil:"encrypted_password" json:"encrypted_password,omitempty" toml:"encrypted_password" yaml:"encrypted_password,omitempty"`
	Enabled           bool       `boil:"enabled" json:"enabled" toml:"enabled" yaml:"enabled"`
	Quota             int        `boil:"quota" json:"quota" toml:"quota" yaml:"quota"`
	CreatedAt         time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt         time.Time  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *domainEmailUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L domainEmailUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DomainEmailUserColumns = struct {
	DomainID          string
	BaseAddress       string
	EncryptedPassword string
	Enabled           string
	Quota             string
	CreatedAt         string
	UpdatedAt         string
}{
	DomainID:          "domain_id",
	BaseAddress:       "base_address",
	EncryptedPassword: "encrypted_password",
	Enabled:           "enabled",
	Quota:             "quota",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
}

var DomainEmailUserTableColumns = struct {
	DomainID          string
	BaseAddress       string
	EncryptedPassword string
	Enabled           string
	Quota             string
	CreatedAt         string
	UpdatedAt         string
}{
	DomainID:          "domain_email_user.domain_id",
	BaseAddress:       "domain_email_user.base_address",
	EncryptedPassword: "domain_email_user.encrypted_password",
	Enabled:           "domain_email_user.enabled",
	Quota:             "domain_email_user.quota",
	CreatedAt:         "domain_email_user.created_at",
	UpdatedAt:         "domain_email_user.updated_at",
}

// Generated where

type whereHelpernull_Bytes struct{ field string }

func (w whereHelpernull_Bytes) EQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bytes) NEQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bytes) LT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bytes) LTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bytes) GT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bytes) GTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bytes) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bytes) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var DomainEmailUserWhere = struct {
	DomainID          whereHelperstring
	BaseAddress       whereHelperstring
	EncryptedPassword whereHelpernull_Bytes
	Enabled           whereHelperbool
	Quota             whereHelperint
	CreatedAt         whereHelpertime_Time
	UpdatedAt         whereHelpertime_Time
}{
	DomainID:          whereHelperstring{field: "\"domain_email_user\".\"domain_id\""},
	BaseAddress:       whereHelperstring{field: "\"domain_email_user\".\"base_address\""},
	EncryptedPassword: whereHelpernull_Bytes{field: "\"domain_email_user\".\"encrypted_password\""},
	Enabled:           whereHelperbool{field: "\"domain_email_user\".\"enabled\""},
	Quota:             whereHelperint{field: "\"domain_email_user\".\"quota\""},
	CreatedAt:         whereHelpertime_Time{field: "\"domain_email_user\".\"created_at\""},
	UpdatedAt:         whereHelpertime_Time{field: "\"domain_email_user\".\"updated_at\""},
}

// DomainEmailUserRels is where relationship names are stored.
var DomainEmailUserRels = struct {
	Domain string
}{
	Domain: "Domain",
}

// domainEmailUserR is where relationships are stored.
type domainEmailUserR struct {
	Domain *Domain `boil:"Domain" json:"Domain" toml:"Domain" yaml:"Domain"`
}

// NewStruct creates a new relationship struct
func (*domainEmailUserR) NewStruct() *domainEmailUserR {
	return &domainEmailUserR{}
}

func (r *domainEmailUserR) GetDomain() *Domain {
	if r == nil {
		return nil
	}
	return r.Domain
}

// domainEmailUserL is where Load methods for each relationship are stored.
type domainEmailUserL struct{}

var (
	domainEmailUserAllColumns            = []string{"domain_id", "base_address", "encrypted_password", "enabled", "quota", "created_at", "updated_at"}
	domainEmailUserColumnsWithoutDefault = []string{"domain_id", "base_address", "enabled", "quota", "created_at", "updated_at"}
	domainEmailUserColumnsWithDefault    = []string{"encrypted_password"}
	domainEmailUserPrimaryKeyColumns     = []string{"domain_id", "base_address"}
	domainEmailUserGeneratedColumns      = []string{}
)

type (
	// DomainEmailUserSlice is an alias for a slice of pointers to DomainEmailUser.
	// This should almost always be used instead of []DomainEmailUser.
	DomainEmailUserSlice []*DomainEmailUser
	// DomainEmailUserHook is the signature for custom DomainEmailUser hook methods
	DomainEmailUserHook func(context.Context, boil.ContextExecutor, *DomainEmailUser) error

	domainEmailUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	domainEmailUserType                 = reflect.TypeOf(&DomainEmailUser{})
	domainEmailUserMapping              = queries.MakeStructMapping(domainEmailUserType)
	domainEmailUserPrimaryKeyMapping, _ = queries.BindMapping(domainEmailUserType, domainEmailUserMapping, domainEmailUserPrimaryKeyColumns)
	domainEmailUserInsertCacheMut       sync.RWMutex
	domainEmailUserInsertCache          = make(map[string]insertCache)
	domainEmailUserUpdateCacheMut       sync.RWMutex
	domainEmailUserUpdateCache          = make(map[string]updateCache)
	domainEmailUserUpsertCacheMut       sync.RWMutex
	domainEmailUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var domainEmailUserAfterSelectHooks []DomainEmailUserHook

var domainEmailUserBeforeInsertHooks []DomainEmailUserHook
var domainEmailUserAfterInsertHooks []DomainEmailUserHook

var domainEmailUserBeforeUpdateHooks []DomainEmailUserHook
var domainEmailUserAfterUpdateHooks []DomainEmailUserHook

var domainEmailUserBeforeDeleteHooks []DomainEmailUserHook
var domainEmailUserAfterDeleteHooks []DomainEmailUserHook

var domainEmailUserBeforeUpsertHooks []DomainEmailUserHook
var domainEmailUserAfterUpsertHooks []DomainEmailUserHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DomainEmailUser) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range domainEmailUserAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DomainEmailUser) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range domainEmailUserBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DomainEmailUser) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range domainEmailUserAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DomainEmailUser) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range domainEmailUserBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DomainEmailUser) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range domainEmailUserAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DomainEmailUser) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range domainEmailUserBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DomainEmailUser) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range domainEmailUserAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DomainEmailUser) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range domainEmailUserBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DomainEmailUser) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range domainEmailUserAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDomainEmailUserHook registers your hook function for all future operations.
func AddDomainEmailUserHook(hookPoint boil.HookPoint, domainEmailUserHook DomainEmailUserHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		domainEmailUserAfterSelectHooks = append(domainEmailUserAfterSelectHooks, domainEmailUserHook)
	case boil.BeforeInsertHook:
		domainEmailUserBeforeInsertHooks = append(domainEmailUserBeforeInsertHooks, domainEmailUserHook)
	case boil.AfterInsertHook:
		domainEmailUserAfterInsertHooks = append(domainEmailUserAfterInsertHooks, domainEmailUserHook)
	case boil.BeforeUpdateHook:
		domainEmailUserBeforeUpdateHooks = append(domainEmailUserBeforeUpdateHooks, domainEmailUserHook)
	case boil.AfterUpdateHook:
		domainEmailUserAfterUpdateHooks = append(domainEmailUserAfterUpdateHooks, domainEmailUserHook)
	case boil.BeforeDeleteHook:
		domainEmailUserBeforeDeleteHooks = append(domainEmailUserBeforeDeleteHooks, domainEmailUserHook)
	case boil.AfterDeleteHook:
		domainEmailUserAfterDeleteHooks = append(domainEmailUserAfterDeleteHooks, domainEmailUserHook)
	case boil.BeforeUpsertHook:
		domainEmailUserBeforeUpsertHooks = append(domainEmailUserBeforeUpsertHooks, domainEmailUserHook)
	case boil.AfterUpsertHook:
		domainEmailUserAfterUpsertHooks = append(domainEmailUserAfterUpsertHooks, domainEmailUserHook)
	}
}

// One returns a single domainEmailUser record from the query.
func (q domainEmailUserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DomainEmailUser, error) {
	o := &DomainEmailUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "datamodels_raw: failed to execute a one query for domain_email_user")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DomainEmailUser records from the query.
func (q domainEmailUserQuery) All(ctx context.Context, exec boil.ContextExecutor) (DomainEmailUserSlice, error) {
	var o []*DomainEmailUser

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "datamodels_raw: failed to assign all query results to DomainEmailUser slice")
	}

	if len(domainEmailUserAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DomainEmailUser records in the query.
func (q domainEmailUserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "datamodels_raw: failed to count domain_email_user rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q domainEmailUserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "datamodels_raw: failed to check if domain_email_user exists")
	}

	return count > 0, nil
}

// Domain pointed to by the foreign key.
func (o *DomainEmailUser) Domain(mods ...qm.QueryMod) domainQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DomainID),
	}

	queryMods = append(queryMods, mods...)

	return Domains(queryMods...)
}

// LoadDomain allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (domainEmailUserL) LoadDomain(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDomainEmailUser interface{}, mods queries.Applicator) error {
	var slice []*DomainEmailUser
	var object *DomainEmailUser

	if singular {
		var ok bool
		object, ok = maybeDomainEmailUser.(*DomainEmailUser)
		if !ok {
			object = new(DomainEmailUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDomainEmailUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDomainEmailUser))
			}
		}
	} else {
		s, ok := maybeDomainEmailUser.(*[]*DomainEmailUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDomainEmailUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDomainEmailUser))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &domainEmailUserR{}
		}
		args = append(args, object.DomainID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &domainEmailUserR{}
			}

			for _, a := range args {
				if a == obj.DomainID {
					continue Outer
				}
			}

			args = append(args, obj.DomainID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`domains`),
		qm.WhereIn(`domains.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Domain")
	}

	var resultSlice []*Domain
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Domain")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for domains")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for domains")
	}

	if len(domainEmailUserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Domain = foreign
		if foreign.R == nil {
			foreign.R = &domainR{}
		}
		foreign.R.DomainEmailUsers = append(foreign.R.DomainEmailUsers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DomainID == foreign.ID {
				local.R.Domain = foreign
				if foreign.R == nil {
					foreign.R = &domainR{}
				}
				foreign.R.DomainEmailUsers = append(foreign.R.DomainEmailUsers, local)
				break
			}
		}
	}

	return nil
}

// SetDomain of the domainEmailUser to the related item.
// Sets o.R.Domain to related.
// Adds o to related.R.DomainEmailUsers.
func (o *DomainEmailUser) SetDomain(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Domain) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"domain_email_user\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"domain_id"}),
		strmangle.WhereClause("\"", "\"", 2, domainEmailUserPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.DomainID, o.BaseAddress}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DomainID = related.ID
	if o.R == nil {
		o.R = &domainEmailUserR{
			Domain: related,
		}
	} else {
		o.R.Domain = related
	}

	if related.R == nil {
		related.R = &domainR{
			DomainEmailUsers: DomainEmailUserSlice{o},
		}
	} else {
		related.R.DomainEmailUsers = append(related.R.DomainEmailUsers, o)
	}

	return nil
}

// DomainEmailUsers retrieves all the records using an executor.
func DomainEmailUsers(mods ...qm.QueryMod) domainEmailUserQuery {
	mods = append(mods, qm.From("\"domain_email_user\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"domain_email_user\".*"})
	}

	return domainEmailUserQuery{q}
}

// FindDomainEmailUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDomainEmailUser(ctx context.Context, exec boil.ContextExecutor, domainID string, baseAddress string, selectCols ...string) (*DomainEmailUser, error) {
	domainEmailUserObj := &DomainEmailUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"domain_email_user\" where \"domain_id\"=$1 AND \"base_address\"=$2", sel,
	)

	q := queries.Raw(query, domainID, baseAddress)

	err := q.Bind(ctx, exec, domainEmailUserObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "datamodels_raw: unable to select from domain_email_user")
	}

	if err = domainEmailUserObj.doAfterSelectHooks(ctx, exec); err != nil {
		return domainEmailUserObj, err
	}

	return domainEmailUserObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DomainEmailUser) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("datamodels_raw: no domain_email_user provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(domainEmailUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	domainEmailUserInsertCacheMut.RLock()
	cache, cached := domainEmailUserInsertCache[key]
	domainEmailUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			domainEmailUserAllColumns,
			domainEmailUserColumnsWithDefault,
			domainEmailUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(domainEmailUserType, domainEmailUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(domainEmailUserType, domainEmailUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"domain_email_user\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"domain_email_user\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "datamodels_raw: unable to insert into domain_email_user")
	}

	if !cached {
		domainEmailUserInsertCacheMut.Lock()
		domainEmailUserInsertCache[key] = cache
		domainEmailUserInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DomainEmailUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DomainEmailUser) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	domainEmailUserUpdateCacheMut.RLock()
	cache, cached := domainEmailUserUpdateCache[key]
	domainEmailUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			domainEmailUserAllColumns,
			domainEmailUserPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("datamodels_raw: unable to update domain_email_user, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"domain_email_user\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, domainEmailUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(domainEmailUserType, domainEmailUserMapping, append(wl, domainEmailUserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "datamodels_raw: unable to update domain_email_user row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datamodels_raw: failed to get rows affected by update for domain_email_user")
	}

	if !cached {
		domainEmailUserUpdateCacheMut.Lock()
		domainEmailUserUpdateCache[key] = cache
		domainEmailUserUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q domainEmailUserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "datamodels_raw: unable to update all for domain_email_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datamodels_raw: unable to retrieve rows affected for domain_email_user")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DomainEmailUserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("datamodels_raw: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), domainEmailUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"domain_email_user\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, domainEmailUserPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "datamodels_raw: unable to update all in domainEmailUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datamodels_raw: unable to retrieve rows affected all in update all domainEmailUser")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DomainEmailUser) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("datamodels_raw: no domain_email_user provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(domainEmailUserColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	domainEmailUserUpsertCacheMut.RLock()
	cache, cached := domainEmailUserUpsertCache[key]
	domainEmailUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			domainEmailUserAllColumns,
			domainEmailUserColumnsWithDefault,
			domainEmailUserColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			domainEmailUserAllColumns,
			domainEmailUserPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("datamodels_raw: unable to upsert domain_email_user, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(domainEmailUserPrimaryKeyColumns))
			copy(conflict, domainEmailUserPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"domain_email_user\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(domainEmailUserType, domainEmailUserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(domainEmailUserType, domainEmailUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "datamodels_raw: unable to upsert domain_email_user")
	}

	if !cached {
		domainEmailUserUpsertCacheMut.Lock()
		domainEmailUserUpsertCache[key] = cache
		domainEmailUserUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DomainEmailUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DomainEmailUser) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("datamodels_raw: no DomainEmailUser provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), domainEmailUserPrimaryKeyMapping)
	sql := "DELETE FROM \"domain_email_user\" WHERE \"domain_id\"=$1 AND \"base_address\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "datamodels_raw: unable to delete from domain_email_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datamodels_raw: failed to get rows affected by delete for domain_email_user")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q domainEmailUserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("datamodels_raw: no domainEmailUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "datamodels_raw: unable to delete all from domain_email_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datamodels_raw: failed to get rows affected by deleteall for domain_email_user")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DomainEmailUserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(domainEmailUserBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), domainEmailUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"domain_email_user\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, domainEmailUserPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "datamodels_raw: unable to delete all from domainEmailUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datamodels_raw: failed to get rows affected by deleteall for domain_email_user")
	}

	if len(domainEmailUserAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DomainEmailUser) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDomainEmailUser(ctx, exec, o.DomainID, o.BaseAddress)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DomainEmailUserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DomainEmailUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), domainEmailUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"domain_email_user\".* FROM \"domain_email_user\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, domainEmailUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "datamodels_raw: unable to reload all in DomainEmailUserSlice")
	}

	*o = slice

	return nil
}

// DomainEmailUserExists checks if the DomainEmailUser row exists.
func DomainEmailUserExists(ctx context.Context, exec boil.ContextExecutor, domainID string, baseAddress string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"domain_email_user\" where \"domain_id\"=$1 AND \"base_address\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, domainID, baseAddress)
	}
	row := exec.QueryRowContext(ctx, sql, domainID, baseAddress)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "datamodels_raw: unable to check if domain_email_user exists")
	}

	return exists, nil
}
