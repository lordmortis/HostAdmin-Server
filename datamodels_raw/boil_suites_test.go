// Code generated by SQLBoiler 4.12.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package datamodels_raw

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("DomainEmailAliases", testDomainEmailAliases)
	t.Run("DomainEmailUsers", testDomainEmailUsers)
	t.Run("Domains", testDomains)
	t.Run("UserDomains", testUserDomains)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("DomainEmailAliases", testDomainEmailAliasesDelete)
	t.Run("DomainEmailUsers", testDomainEmailUsersDelete)
	t.Run("Domains", testDomainsDelete)
	t.Run("UserDomains", testUserDomainsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("DomainEmailAliases", testDomainEmailAliasesQueryDeleteAll)
	t.Run("DomainEmailUsers", testDomainEmailUsersQueryDeleteAll)
	t.Run("Domains", testDomainsQueryDeleteAll)
	t.Run("UserDomains", testUserDomainsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("DomainEmailAliases", testDomainEmailAliasesSliceDeleteAll)
	t.Run("DomainEmailUsers", testDomainEmailUsersSliceDeleteAll)
	t.Run("Domains", testDomainsSliceDeleteAll)
	t.Run("UserDomains", testUserDomainsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("DomainEmailAliases", testDomainEmailAliasesExists)
	t.Run("DomainEmailUsers", testDomainEmailUsersExists)
	t.Run("Domains", testDomainsExists)
	t.Run("UserDomains", testUserDomainsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("DomainEmailAliases", testDomainEmailAliasesFind)
	t.Run("DomainEmailUsers", testDomainEmailUsersFind)
	t.Run("Domains", testDomainsFind)
	t.Run("UserDomains", testUserDomainsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("DomainEmailAliases", testDomainEmailAliasesBind)
	t.Run("DomainEmailUsers", testDomainEmailUsersBind)
	t.Run("Domains", testDomainsBind)
	t.Run("UserDomains", testUserDomainsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("DomainEmailAliases", testDomainEmailAliasesOne)
	t.Run("DomainEmailUsers", testDomainEmailUsersOne)
	t.Run("Domains", testDomainsOne)
	t.Run("UserDomains", testUserDomainsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("DomainEmailAliases", testDomainEmailAliasesAll)
	t.Run("DomainEmailUsers", testDomainEmailUsersAll)
	t.Run("Domains", testDomainsAll)
	t.Run("UserDomains", testUserDomainsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("DomainEmailAliases", testDomainEmailAliasesCount)
	t.Run("DomainEmailUsers", testDomainEmailUsersCount)
	t.Run("Domains", testDomainsCount)
	t.Run("UserDomains", testUserDomainsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("DomainEmailAliases", testDomainEmailAliasesHooks)
	t.Run("DomainEmailUsers", testDomainEmailUsersHooks)
	t.Run("Domains", testDomainsHooks)
	t.Run("UserDomains", testUserDomainsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("DomainEmailAliases", testDomainEmailAliasesInsert)
	t.Run("DomainEmailAliases", testDomainEmailAliasesInsertWhitelist)
	t.Run("DomainEmailUsers", testDomainEmailUsersInsert)
	t.Run("DomainEmailUsers", testDomainEmailUsersInsertWhitelist)
	t.Run("Domains", testDomainsInsert)
	t.Run("Domains", testDomainsInsertWhitelist)
	t.Run("UserDomains", testUserDomainsInsert)
	t.Run("UserDomains", testUserDomainsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("DomainEmailAliasToDomainUsingDomain", testDomainEmailAliasToOneDomainUsingDomain)
	t.Run("DomainEmailUserToDomainUsingDomain", testDomainEmailUserToOneDomainUsingDomain)
	t.Run("UserDomainToDomainUsingDomain", testUserDomainToOneDomainUsingDomain)
	t.Run("UserDomainToUserUsingUser", testUserDomainToOneUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("DomainToDomainEmailAliases", testDomainToManyDomainEmailAliases)
	t.Run("DomainToDomainEmailUsers", testDomainToManyDomainEmailUsers)
	t.Run("DomainToUserDomains", testDomainToManyUserDomains)
	t.Run("UserToUserDomains", testUserToManyUserDomains)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("DomainEmailAliasToDomainUsingDomainEmailAliases", testDomainEmailAliasToOneSetOpDomainUsingDomain)
	t.Run("DomainEmailUserToDomainUsingDomainEmailUsers", testDomainEmailUserToOneSetOpDomainUsingDomain)
	t.Run("UserDomainToDomainUsingUserDomains", testUserDomainToOneSetOpDomainUsingDomain)
	t.Run("UserDomainToUserUsingUserDomains", testUserDomainToOneSetOpUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("DomainToDomainEmailAliases", testDomainToManyAddOpDomainEmailAliases)
	t.Run("DomainToDomainEmailUsers", testDomainToManyAddOpDomainEmailUsers)
	t.Run("DomainToUserDomains", testDomainToManyAddOpUserDomains)
	t.Run("UserToUserDomains", testUserToManyAddOpUserDomains)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("DomainEmailAliases", testDomainEmailAliasesReload)
	t.Run("DomainEmailUsers", testDomainEmailUsersReload)
	t.Run("Domains", testDomainsReload)
	t.Run("UserDomains", testUserDomainsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("DomainEmailAliases", testDomainEmailAliasesReloadAll)
	t.Run("DomainEmailUsers", testDomainEmailUsersReloadAll)
	t.Run("Domains", testDomainsReloadAll)
	t.Run("UserDomains", testUserDomainsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("DomainEmailAliases", testDomainEmailAliasesSelect)
	t.Run("DomainEmailUsers", testDomainEmailUsersSelect)
	t.Run("Domains", testDomainsSelect)
	t.Run("UserDomains", testUserDomainsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("DomainEmailAliases", testDomainEmailAliasesUpdate)
	t.Run("DomainEmailUsers", testDomainEmailUsersUpdate)
	t.Run("Domains", testDomainsUpdate)
	t.Run("UserDomains", testUserDomainsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("DomainEmailAliases", testDomainEmailAliasesSliceUpdateAll)
	t.Run("DomainEmailUsers", testDomainEmailUsersSliceUpdateAll)
	t.Run("Domains", testDomainsSliceUpdateAll)
	t.Run("UserDomains", testUserDomainsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
