// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package datamodels_raw

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Domains", testDomains)
	t.Run("UserDomains", testUserDomains)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Domains", testDomainsDelete)
	t.Run("UserDomains", testUserDomainsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Domains", testDomainsQueryDeleteAll)
	t.Run("UserDomains", testUserDomainsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Domains", testDomainsSliceDeleteAll)
	t.Run("UserDomains", testUserDomainsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Domains", testDomainsExists)
	t.Run("UserDomains", testUserDomainsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Domains", testDomainsFind)
	t.Run("UserDomains", testUserDomainsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Domains", testDomainsBind)
	t.Run("UserDomains", testUserDomainsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Domains", testDomainsOne)
	t.Run("UserDomains", testUserDomainsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Domains", testDomainsAll)
	t.Run("UserDomains", testUserDomainsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Domains", testDomainsCount)
	t.Run("UserDomains", testUserDomainsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Domains", testDomainsHooks)
	t.Run("UserDomains", testUserDomainsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Domains", testDomainsInsert)
	t.Run("Domains", testDomainsInsertWhitelist)
	t.Run("UserDomains", testUserDomainsInsert)
	t.Run("UserDomains", testUserDomainsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("UserDomainToDomainUsingDomain", testUserDomainToOneDomainUsingDomain)
	t.Run("UserDomainToUserUsingUser", testUserDomainToOneUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("DomainToUserDomains", testDomainToManyUserDomains)
	t.Run("UserToUserDomains", testUserToManyUserDomains)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("UserDomainToDomainUsingUserDomains", testUserDomainToOneSetOpDomainUsingDomain)
	t.Run("UserDomainToUserUsingUserDomains", testUserDomainToOneSetOpUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("DomainToUserDomains", testDomainToManyAddOpUserDomains)
	t.Run("UserToUserDomains", testUserToManyAddOpUserDomains)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Domains", testDomainsReload)
	t.Run("UserDomains", testUserDomainsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Domains", testDomainsReloadAll)
	t.Run("UserDomains", testUserDomainsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Domains", testDomainsSelect)
	t.Run("UserDomains", testUserDomainsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Domains", testDomainsUpdate)
	t.Run("UserDomains", testUserDomainsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Domains", testDomainsSliceUpdateAll)
	t.Run("UserDomains", testUserDomainsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
