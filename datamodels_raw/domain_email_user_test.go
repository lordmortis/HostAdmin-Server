// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package datamodels_raw

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDomainEmailUsers(t *testing.T) {
	t.Parallel()

	query := DomainEmailUsers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDomainEmailUsersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DomainEmailUser{}
	if err = randomize.Struct(seed, o, domainEmailUserDBTypes, true, domainEmailUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DomainEmailUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DomainEmailUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDomainEmailUsersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DomainEmailUser{}
	if err = randomize.Struct(seed, o, domainEmailUserDBTypes, true, domainEmailUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DomainEmailUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DomainEmailUsers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DomainEmailUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDomainEmailUsersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DomainEmailUser{}
	if err = randomize.Struct(seed, o, domainEmailUserDBTypes, true, domainEmailUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DomainEmailUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DomainEmailUserSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DomainEmailUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDomainEmailUsersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DomainEmailUser{}
	if err = randomize.Struct(seed, o, domainEmailUserDBTypes, true, domainEmailUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DomainEmailUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DomainEmailUserExists(ctx, tx, o.DomainID, o.BaseAddress)
	if err != nil {
		t.Errorf("Unable to check if DomainEmailUser exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DomainEmailUserExists to return true, but got false.")
	}
}

func testDomainEmailUsersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DomainEmailUser{}
	if err = randomize.Struct(seed, o, domainEmailUserDBTypes, true, domainEmailUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DomainEmailUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	domainEmailUserFound, err := FindDomainEmailUser(ctx, tx, o.DomainID, o.BaseAddress)
	if err != nil {
		t.Error(err)
	}

	if domainEmailUserFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDomainEmailUsersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DomainEmailUser{}
	if err = randomize.Struct(seed, o, domainEmailUserDBTypes, true, domainEmailUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DomainEmailUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DomainEmailUsers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDomainEmailUsersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DomainEmailUser{}
	if err = randomize.Struct(seed, o, domainEmailUserDBTypes, true, domainEmailUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DomainEmailUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DomainEmailUsers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDomainEmailUsersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	domainEmailUserOne := &DomainEmailUser{}
	domainEmailUserTwo := &DomainEmailUser{}
	if err = randomize.Struct(seed, domainEmailUserOne, domainEmailUserDBTypes, false, domainEmailUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DomainEmailUser struct: %s", err)
	}
	if err = randomize.Struct(seed, domainEmailUserTwo, domainEmailUserDBTypes, false, domainEmailUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DomainEmailUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = domainEmailUserOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = domainEmailUserTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DomainEmailUsers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDomainEmailUsersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	domainEmailUserOne := &DomainEmailUser{}
	domainEmailUserTwo := &DomainEmailUser{}
	if err = randomize.Struct(seed, domainEmailUserOne, domainEmailUserDBTypes, false, domainEmailUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DomainEmailUser struct: %s", err)
	}
	if err = randomize.Struct(seed, domainEmailUserTwo, domainEmailUserDBTypes, false, domainEmailUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DomainEmailUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = domainEmailUserOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = domainEmailUserTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DomainEmailUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func domainEmailUserBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DomainEmailUser) error {
	*o = DomainEmailUser{}
	return nil
}

func domainEmailUserAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DomainEmailUser) error {
	*o = DomainEmailUser{}
	return nil
}

func domainEmailUserAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DomainEmailUser) error {
	*o = DomainEmailUser{}
	return nil
}

func domainEmailUserBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DomainEmailUser) error {
	*o = DomainEmailUser{}
	return nil
}

func domainEmailUserAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DomainEmailUser) error {
	*o = DomainEmailUser{}
	return nil
}

func domainEmailUserBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DomainEmailUser) error {
	*o = DomainEmailUser{}
	return nil
}

func domainEmailUserAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DomainEmailUser) error {
	*o = DomainEmailUser{}
	return nil
}

func domainEmailUserBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DomainEmailUser) error {
	*o = DomainEmailUser{}
	return nil
}

func domainEmailUserAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DomainEmailUser) error {
	*o = DomainEmailUser{}
	return nil
}

func testDomainEmailUsersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DomainEmailUser{}
	o := &DomainEmailUser{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, domainEmailUserDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DomainEmailUser object: %s", err)
	}

	AddDomainEmailUserHook(boil.BeforeInsertHook, domainEmailUserBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	domainEmailUserBeforeInsertHooks = []DomainEmailUserHook{}

	AddDomainEmailUserHook(boil.AfterInsertHook, domainEmailUserAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	domainEmailUserAfterInsertHooks = []DomainEmailUserHook{}

	AddDomainEmailUserHook(boil.AfterSelectHook, domainEmailUserAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	domainEmailUserAfterSelectHooks = []DomainEmailUserHook{}

	AddDomainEmailUserHook(boil.BeforeUpdateHook, domainEmailUserBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	domainEmailUserBeforeUpdateHooks = []DomainEmailUserHook{}

	AddDomainEmailUserHook(boil.AfterUpdateHook, domainEmailUserAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	domainEmailUserAfterUpdateHooks = []DomainEmailUserHook{}

	AddDomainEmailUserHook(boil.BeforeDeleteHook, domainEmailUserBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	domainEmailUserBeforeDeleteHooks = []DomainEmailUserHook{}

	AddDomainEmailUserHook(boil.AfterDeleteHook, domainEmailUserAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	domainEmailUserAfterDeleteHooks = []DomainEmailUserHook{}

	AddDomainEmailUserHook(boil.BeforeUpsertHook, domainEmailUserBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	domainEmailUserBeforeUpsertHooks = []DomainEmailUserHook{}

	AddDomainEmailUserHook(boil.AfterUpsertHook, domainEmailUserAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	domainEmailUserAfterUpsertHooks = []DomainEmailUserHook{}
}

func testDomainEmailUsersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DomainEmailUser{}
	if err = randomize.Struct(seed, o, domainEmailUserDBTypes, true, domainEmailUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DomainEmailUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DomainEmailUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDomainEmailUsersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DomainEmailUser{}
	if err = randomize.Struct(seed, o, domainEmailUserDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DomainEmailUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(domainEmailUserColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DomainEmailUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDomainEmailUserToOneDomainUsingDomain(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DomainEmailUser
	var foreign Domain

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, domainEmailUserDBTypes, false, domainEmailUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DomainEmailUser struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, domainDBTypes, false, domainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Domain struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DomainID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Domain().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DomainEmailUserSlice{&local}
	if err = local.L.LoadDomain(ctx, tx, false, (*[]*DomainEmailUser)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Domain == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Domain = nil
	if err = local.L.LoadDomain(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Domain == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDomainEmailUserToOneSetOpDomainUsingDomain(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DomainEmailUser
	var b, c Domain

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, domainEmailUserDBTypes, false, strmangle.SetComplement(domainEmailUserPrimaryKeyColumns, domainEmailUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, domainDBTypes, false, strmangle.SetComplement(domainPrimaryKeyColumns, domainColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, domainDBTypes, false, strmangle.SetComplement(domainPrimaryKeyColumns, domainColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Domain{&b, &c} {
		err = a.SetDomain(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Domain != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DomainEmailUsers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DomainID != x.ID {
			t.Error("foreign key was wrong value", a.DomainID)
		}

		if exists, err := DomainEmailUserExists(ctx, tx, a.DomainID, a.BaseAddress); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testDomainEmailUsersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DomainEmailUser{}
	if err = randomize.Struct(seed, o, domainEmailUserDBTypes, true, domainEmailUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DomainEmailUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDomainEmailUsersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DomainEmailUser{}
	if err = randomize.Struct(seed, o, domainEmailUserDBTypes, true, domainEmailUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DomainEmailUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DomainEmailUserSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDomainEmailUsersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DomainEmailUser{}
	if err = randomize.Struct(seed, o, domainEmailUserDBTypes, true, domainEmailUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DomainEmailUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DomainEmailUsers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	domainEmailUserDBTypes = map[string]string{`DomainID`: `uuid`, `BaseAddress`: `character varying`, `EncryptedPassword`: `bytea`, `Enabled`: `boolean`, `Quota`: `integer`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_                      = bytes.MinRead
)

func testDomainEmailUsersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(domainEmailUserPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(domainEmailUserAllColumns) == len(domainEmailUserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DomainEmailUser{}
	if err = randomize.Struct(seed, o, domainEmailUserDBTypes, true, domainEmailUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DomainEmailUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DomainEmailUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, domainEmailUserDBTypes, true, domainEmailUserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DomainEmailUser struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDomainEmailUsersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(domainEmailUserAllColumns) == len(domainEmailUserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DomainEmailUser{}
	if err = randomize.Struct(seed, o, domainEmailUserDBTypes, true, domainEmailUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DomainEmailUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DomainEmailUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, domainEmailUserDBTypes, true, domainEmailUserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DomainEmailUser struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(domainEmailUserAllColumns, domainEmailUserPrimaryKeyColumns) {
		fields = domainEmailUserAllColumns
	} else {
		fields = strmangle.SetComplement(
			domainEmailUserAllColumns,
			domainEmailUserPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DomainEmailUserSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDomainEmailUsersUpsert(t *testing.T) {
	t.Parallel()

	if len(domainEmailUserAllColumns) == len(domainEmailUserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DomainEmailUser{}
	if err = randomize.Struct(seed, &o, domainEmailUserDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DomainEmailUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DomainEmailUser: %s", err)
	}

	count, err := DomainEmailUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, domainEmailUserDBTypes, false, domainEmailUserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DomainEmailUser struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DomainEmailUser: %s", err)
	}

	count, err = DomainEmailUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
