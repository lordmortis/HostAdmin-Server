// Code generated by SQLBoiler 4.12.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package datamodels_raw

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// DomainEmailAlias is an object representing the database table.
type DomainEmailAlias struct {
	DomainID     string            `boil:"domain_id" json:"domain_id" toml:"domain_id" yaml:"domain_id"`
	Address      string            `boil:"address" json:"address" toml:"address" yaml:"address"`
	Destinations types.StringArray `boil:"destinations" json:"destinations,omitempty" toml:"destinations" yaml:"destinations,omitempty"`
	CreatedAt    time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *domainEmailAliasR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L domainEmailAliasL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DomainEmailAliasColumns = struct {
	DomainID     string
	Address      string
	Destinations string
	CreatedAt    string
	UpdatedAt    string
}{
	DomainID:     "domain_id",
	Address:      "address",
	Destinations: "destinations",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
}

var DomainEmailAliasTableColumns = struct {
	DomainID     string
	Address      string
	Destinations string
	CreatedAt    string
	UpdatedAt    string
}{
	DomainID:     "domain_email_alias.domain_id",
	Address:      "domain_email_alias.address",
	Destinations: "domain_email_alias.destinations",
	CreatedAt:    "domain_email_alias.created_at",
	UpdatedAt:    "domain_email_alias.updated_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertypes_StringArray struct{ field string }

func (w whereHelpertypes_StringArray) EQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_StringArray) NEQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_StringArray) LT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_StringArray) LTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_StringArray) GT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_StringArray) GTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_StringArray) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_StringArray) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var DomainEmailAliasWhere = struct {
	DomainID     whereHelperstring
	Address      whereHelperstring
	Destinations whereHelpertypes_StringArray
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
}{
	DomainID:     whereHelperstring{field: "\"domain_email_alias\".\"domain_id\""},
	Address:      whereHelperstring{field: "\"domain_email_alias\".\"address\""},
	Destinations: whereHelpertypes_StringArray{field: "\"domain_email_alias\".\"destinations\""},
	CreatedAt:    whereHelpertime_Time{field: "\"domain_email_alias\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"domain_email_alias\".\"updated_at\""},
}

// DomainEmailAliasRels is where relationship names are stored.
var DomainEmailAliasRels = struct {
	Domain string
}{
	Domain: "Domain",
}

// domainEmailAliasR is where relationships are stored.
type domainEmailAliasR struct {
	Domain *Domain `boil:"Domain" json:"Domain" toml:"Domain" yaml:"Domain"`
}

// NewStruct creates a new relationship struct
func (*domainEmailAliasR) NewStruct() *domainEmailAliasR {
	return &domainEmailAliasR{}
}

func (r *domainEmailAliasR) GetDomain() *Domain {
	if r == nil {
		return nil
	}
	return r.Domain
}

// domainEmailAliasL is where Load methods for each relationship are stored.
type domainEmailAliasL struct{}

var (
	domainEmailAliasAllColumns            = []string{"domain_id", "address", "destinations", "created_at", "updated_at"}
	domainEmailAliasColumnsWithoutDefault = []string{"domain_id", "address", "created_at", "updated_at"}
	domainEmailAliasColumnsWithDefault    = []string{"destinations"}
	domainEmailAliasPrimaryKeyColumns     = []string{"domain_id", "address"}
	domainEmailAliasGeneratedColumns      = []string{}
)

type (
	// DomainEmailAliasSlice is an alias for a slice of pointers to DomainEmailAlias.
	// This should almost always be used instead of []DomainEmailAlias.
	DomainEmailAliasSlice []*DomainEmailAlias
	// DomainEmailAliasHook is the signature for custom DomainEmailAlias hook methods
	DomainEmailAliasHook func(context.Context, boil.ContextExecutor, *DomainEmailAlias) error

	domainEmailAliasQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	domainEmailAliasType                 = reflect.TypeOf(&DomainEmailAlias{})
	domainEmailAliasMapping              = queries.MakeStructMapping(domainEmailAliasType)
	domainEmailAliasPrimaryKeyMapping, _ = queries.BindMapping(domainEmailAliasType, domainEmailAliasMapping, domainEmailAliasPrimaryKeyColumns)
	domainEmailAliasInsertCacheMut       sync.RWMutex
	domainEmailAliasInsertCache          = make(map[string]insertCache)
	domainEmailAliasUpdateCacheMut       sync.RWMutex
	domainEmailAliasUpdateCache          = make(map[string]updateCache)
	domainEmailAliasUpsertCacheMut       sync.RWMutex
	domainEmailAliasUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var domainEmailAliasAfterSelectHooks []DomainEmailAliasHook

var domainEmailAliasBeforeInsertHooks []DomainEmailAliasHook
var domainEmailAliasAfterInsertHooks []DomainEmailAliasHook

var domainEmailAliasBeforeUpdateHooks []DomainEmailAliasHook
var domainEmailAliasAfterUpdateHooks []DomainEmailAliasHook

var domainEmailAliasBeforeDeleteHooks []DomainEmailAliasHook
var domainEmailAliasAfterDeleteHooks []DomainEmailAliasHook

var domainEmailAliasBeforeUpsertHooks []DomainEmailAliasHook
var domainEmailAliasAfterUpsertHooks []DomainEmailAliasHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DomainEmailAlias) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range domainEmailAliasAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DomainEmailAlias) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range domainEmailAliasBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DomainEmailAlias) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range domainEmailAliasAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DomainEmailAlias) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range domainEmailAliasBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DomainEmailAlias) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range domainEmailAliasAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DomainEmailAlias) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range domainEmailAliasBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DomainEmailAlias) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range domainEmailAliasAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DomainEmailAlias) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range domainEmailAliasBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DomainEmailAlias) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range domainEmailAliasAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDomainEmailAliasHook registers your hook function for all future operations.
func AddDomainEmailAliasHook(hookPoint boil.HookPoint, domainEmailAliasHook DomainEmailAliasHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		domainEmailAliasAfterSelectHooks = append(domainEmailAliasAfterSelectHooks, domainEmailAliasHook)
	case boil.BeforeInsertHook:
		domainEmailAliasBeforeInsertHooks = append(domainEmailAliasBeforeInsertHooks, domainEmailAliasHook)
	case boil.AfterInsertHook:
		domainEmailAliasAfterInsertHooks = append(domainEmailAliasAfterInsertHooks, domainEmailAliasHook)
	case boil.BeforeUpdateHook:
		domainEmailAliasBeforeUpdateHooks = append(domainEmailAliasBeforeUpdateHooks, domainEmailAliasHook)
	case boil.AfterUpdateHook:
		domainEmailAliasAfterUpdateHooks = append(domainEmailAliasAfterUpdateHooks, domainEmailAliasHook)
	case boil.BeforeDeleteHook:
		domainEmailAliasBeforeDeleteHooks = append(domainEmailAliasBeforeDeleteHooks, domainEmailAliasHook)
	case boil.AfterDeleteHook:
		domainEmailAliasAfterDeleteHooks = append(domainEmailAliasAfterDeleteHooks, domainEmailAliasHook)
	case boil.BeforeUpsertHook:
		domainEmailAliasBeforeUpsertHooks = append(domainEmailAliasBeforeUpsertHooks, domainEmailAliasHook)
	case boil.AfterUpsertHook:
		domainEmailAliasAfterUpsertHooks = append(domainEmailAliasAfterUpsertHooks, domainEmailAliasHook)
	}
}

// One returns a single domainEmailAlias record from the query.
func (q domainEmailAliasQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DomainEmailAlias, error) {
	o := &DomainEmailAlias{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "datamodels_raw: failed to execute a one query for domain_email_alias")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DomainEmailAlias records from the query.
func (q domainEmailAliasQuery) All(ctx context.Context, exec boil.ContextExecutor) (DomainEmailAliasSlice, error) {
	var o []*DomainEmailAlias

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "datamodels_raw: failed to assign all query results to DomainEmailAlias slice")
	}

	if len(domainEmailAliasAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DomainEmailAlias records in the query.
func (q domainEmailAliasQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "datamodels_raw: failed to count domain_email_alias rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q domainEmailAliasQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "datamodels_raw: failed to check if domain_email_alias exists")
	}

	return count > 0, nil
}

// Domain pointed to by the foreign key.
func (o *DomainEmailAlias) Domain(mods ...qm.QueryMod) domainQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DomainID),
	}

	queryMods = append(queryMods, mods...)

	return Domains(queryMods...)
}

// LoadDomain allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (domainEmailAliasL) LoadDomain(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDomainEmailAlias interface{}, mods queries.Applicator) error {
	var slice []*DomainEmailAlias
	var object *DomainEmailAlias

	if singular {
		var ok bool
		object, ok = maybeDomainEmailAlias.(*DomainEmailAlias)
		if !ok {
			object = new(DomainEmailAlias)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDomainEmailAlias)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDomainEmailAlias))
			}
		}
	} else {
		s, ok := maybeDomainEmailAlias.(*[]*DomainEmailAlias)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDomainEmailAlias)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDomainEmailAlias))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &domainEmailAliasR{}
		}
		args = append(args, object.DomainID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &domainEmailAliasR{}
			}

			for _, a := range args {
				if a == obj.DomainID {
					continue Outer
				}
			}

			args = append(args, obj.DomainID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`domains`),
		qm.WhereIn(`domains.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Domain")
	}

	var resultSlice []*Domain
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Domain")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for domains")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for domains")
	}

	if len(domainEmailAliasAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Domain = foreign
		if foreign.R == nil {
			foreign.R = &domainR{}
		}
		foreign.R.DomainEmailAliases = append(foreign.R.DomainEmailAliases, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DomainID == foreign.ID {
				local.R.Domain = foreign
				if foreign.R == nil {
					foreign.R = &domainR{}
				}
				foreign.R.DomainEmailAliases = append(foreign.R.DomainEmailAliases, local)
				break
			}
		}
	}

	return nil
}

// SetDomain of the domainEmailAlias to the related item.
// Sets o.R.Domain to related.
// Adds o to related.R.DomainEmailAliases.
func (o *DomainEmailAlias) SetDomain(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Domain) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"domain_email_alias\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"domain_id"}),
		strmangle.WhereClause("\"", "\"", 2, domainEmailAliasPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.DomainID, o.Address}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DomainID = related.ID
	if o.R == nil {
		o.R = &domainEmailAliasR{
			Domain: related,
		}
	} else {
		o.R.Domain = related
	}

	if related.R == nil {
		related.R = &domainR{
			DomainEmailAliases: DomainEmailAliasSlice{o},
		}
	} else {
		related.R.DomainEmailAliases = append(related.R.DomainEmailAliases, o)
	}

	return nil
}

// DomainEmailAliases retrieves all the records using an executor.
func DomainEmailAliases(mods ...qm.QueryMod) domainEmailAliasQuery {
	mods = append(mods, qm.From("\"domain_email_alias\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"domain_email_alias\".*"})
	}

	return domainEmailAliasQuery{q}
}

// FindDomainEmailAlias retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDomainEmailAlias(ctx context.Context, exec boil.ContextExecutor, domainID string, address string, selectCols ...string) (*DomainEmailAlias, error) {
	domainEmailAliasObj := &DomainEmailAlias{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"domain_email_alias\" where \"domain_id\"=$1 AND \"address\"=$2", sel,
	)

	q := queries.Raw(query, domainID, address)

	err := q.Bind(ctx, exec, domainEmailAliasObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "datamodels_raw: unable to select from domain_email_alias")
	}

	if err = domainEmailAliasObj.doAfterSelectHooks(ctx, exec); err != nil {
		return domainEmailAliasObj, err
	}

	return domainEmailAliasObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DomainEmailAlias) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("datamodels_raw: no domain_email_alias provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(domainEmailAliasColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	domainEmailAliasInsertCacheMut.RLock()
	cache, cached := domainEmailAliasInsertCache[key]
	domainEmailAliasInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			domainEmailAliasAllColumns,
			domainEmailAliasColumnsWithDefault,
			domainEmailAliasColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(domainEmailAliasType, domainEmailAliasMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(domainEmailAliasType, domainEmailAliasMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"domain_email_alias\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"domain_email_alias\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "datamodels_raw: unable to insert into domain_email_alias")
	}

	if !cached {
		domainEmailAliasInsertCacheMut.Lock()
		domainEmailAliasInsertCache[key] = cache
		domainEmailAliasInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DomainEmailAlias.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DomainEmailAlias) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	domainEmailAliasUpdateCacheMut.RLock()
	cache, cached := domainEmailAliasUpdateCache[key]
	domainEmailAliasUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			domainEmailAliasAllColumns,
			domainEmailAliasPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("datamodels_raw: unable to update domain_email_alias, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"domain_email_alias\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, domainEmailAliasPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(domainEmailAliasType, domainEmailAliasMapping, append(wl, domainEmailAliasPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "datamodels_raw: unable to update domain_email_alias row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datamodels_raw: failed to get rows affected by update for domain_email_alias")
	}

	if !cached {
		domainEmailAliasUpdateCacheMut.Lock()
		domainEmailAliasUpdateCache[key] = cache
		domainEmailAliasUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q domainEmailAliasQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "datamodels_raw: unable to update all for domain_email_alias")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datamodels_raw: unable to retrieve rows affected for domain_email_alias")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DomainEmailAliasSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("datamodels_raw: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), domainEmailAliasPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"domain_email_alias\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, domainEmailAliasPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "datamodels_raw: unable to update all in domainEmailAlias slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datamodels_raw: unable to retrieve rows affected all in update all domainEmailAlias")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DomainEmailAlias) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("datamodels_raw: no domain_email_alias provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(domainEmailAliasColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	domainEmailAliasUpsertCacheMut.RLock()
	cache, cached := domainEmailAliasUpsertCache[key]
	domainEmailAliasUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			domainEmailAliasAllColumns,
			domainEmailAliasColumnsWithDefault,
			domainEmailAliasColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			domainEmailAliasAllColumns,
			domainEmailAliasPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("datamodels_raw: unable to upsert domain_email_alias, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(domainEmailAliasPrimaryKeyColumns))
			copy(conflict, domainEmailAliasPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"domain_email_alias\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(domainEmailAliasType, domainEmailAliasMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(domainEmailAliasType, domainEmailAliasMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "datamodels_raw: unable to upsert domain_email_alias")
	}

	if !cached {
		domainEmailAliasUpsertCacheMut.Lock()
		domainEmailAliasUpsertCache[key] = cache
		domainEmailAliasUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DomainEmailAlias record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DomainEmailAlias) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("datamodels_raw: no DomainEmailAlias provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), domainEmailAliasPrimaryKeyMapping)
	sql := "DELETE FROM \"domain_email_alias\" WHERE \"domain_id\"=$1 AND \"address\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "datamodels_raw: unable to delete from domain_email_alias")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datamodels_raw: failed to get rows affected by delete for domain_email_alias")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q domainEmailAliasQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("datamodels_raw: no domainEmailAliasQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "datamodels_raw: unable to delete all from domain_email_alias")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datamodels_raw: failed to get rows affected by deleteall for domain_email_alias")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DomainEmailAliasSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(domainEmailAliasBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), domainEmailAliasPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"domain_email_alias\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, domainEmailAliasPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "datamodels_raw: unable to delete all from domainEmailAlias slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datamodels_raw: failed to get rows affected by deleteall for domain_email_alias")
	}

	if len(domainEmailAliasAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DomainEmailAlias) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDomainEmailAlias(ctx, exec, o.DomainID, o.Address)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DomainEmailAliasSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DomainEmailAliasSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), domainEmailAliasPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"domain_email_alias\".* FROM \"domain_email_alias\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, domainEmailAliasPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "datamodels_raw: unable to reload all in DomainEmailAliasSlice")
	}

	*o = slice

	return nil
}

// DomainEmailAliasExists checks if the DomainEmailAlias row exists.
func DomainEmailAliasExists(ctx context.Context, exec boil.ContextExecutor, domainID string, address string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"domain_email_alias\" where \"domain_id\"=$1 AND \"address\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, domainID, address)
	}
	row := exec.QueryRowContext(ctx, sql, domainID, address)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "datamodels_raw: unable to check if domain_email_alias exists")
	}

	return exists, nil
}
