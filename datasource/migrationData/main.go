// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 1555589258_create_users.down.sql (19B)
// 1555589258_create_users.up.sql (272B)
// 1555589937_create_domains.down.sql (21B)
// 1555589937_create_domains.up.sql (164B)
// 1585465452_create_domain_users.down.sql (25B)
// 1585465452_create_domain_users.up.sql (323B)
// 1643446918_add_email_users.down.sql (31B)
// 1643446918_add_email_users.up.sql (340B)
// 1732505546_add_email_aliases.down.sql (32B)
// 1732505546_add_email_aliases.up.sql (260B)

package migrationData

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1555589258_create_usersDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x50\x2a\x2d\x4e\x2d\x2a\x56\xb2\x06\x04\x00\x00\xff\xff\xc2\x23\x41\xc8\x13\x00\x00\x00")

func _1555589258_create_usersDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1555589258_create_usersDownSql,
		"1555589258_create_users.down.sql",
	)
}

func _1555589258_create_usersDownSql() (*asset, error) {
	bytes, err := _1555589258_create_usersDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1555589258_create_users.down.sql", size: 19, mode: os.FileMode(0644), modTime: time.Unix(1554713301, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3e, 0x16, 0xef, 0x60, 0x8a, 0x67, 0x69, 0x63, 0x7d, 0xcd, 0x2d, 0x38, 0xad, 0xc3, 0x7f, 0x3c, 0xd8, 0xfb, 0xeb, 0x6a, 0xfd, 0xf9, 0x41, 0x2c, 0x23, 0x70, 0x29, 0x6, 0x9a, 0xf6, 0xaa, 0xef}}
	return a, nil
}

var __1555589258_create_usersUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcc\x31\x6b\x83\x40\x18\xc6\xf1\xdd\x4f\xf1\xe0\xa4\xd0\xa1\x43\xb7\x4e\xb6\xbd\x41\x6a\x6d\x22\xde\xe0\x24\xaf\xde\x0b\x39\xf0\xf4\xb8\x3b\x13\xfc\xf6\xc1\x04\x02\x39\xc8\xfc\xff\x3d\xcf\x77\x23\x8a\x56\xa0\x2d\xbe\x2a\x81\x74\xf5\xec\x7c\x8a\x2c\x01\x00\xad\x20\x65\xf9\x83\xfa\xbf\x45\x2d\xab\x0a\x87\xa6\xfc\x2b\x9a\x0e\xbf\xa2\x7b\xbb\x89\x9d\xcf\x64\x18\x67\x72\xe3\x89\x5c\xf6\xf1\x9e\x43\xd6\xe5\x51\x8a\xc7\xea\x2e\xd9\x90\x9e\x9e\x58\xd4\xe7\xd1\x6d\x36\xb0\xea\x2d\x79\x7f\x59\x9c\xc2\xb0\x05\xa6\x88\xf9\xd5\xb2\xeb\x49\x19\x3d\x63\x58\x96\x29\xca\xa3\x63\xda\x3f\x28\x20\x68\xc3\x3e\x90\xb1\x11\x59\xad\x7a\x4d\x92\xfc\xf3\x1a\x00\x00\xff\xff\x53\x0e\xc4\x59\x10\x01\x00\x00")

func _1555589258_create_usersUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1555589258_create_usersUpSql,
		"1555589258_create_users.up.sql",
	)
}

func _1555589258_create_usersUpSql() (*asset, error) {
	bytes, err := _1555589258_create_usersUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1555589258_create_users.up.sql", size: 272, mode: os.FileMode(0644), modTime: time.Unix(1643463300, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x51, 0x33, 0x52, 0xa0, 0x7, 0x7a, 0x49, 0x93, 0x9b, 0xd2, 0x2c, 0xfc, 0xc1, 0xca, 0xde, 0x26, 0xf2, 0xcd, 0x1f, 0xfb, 0x92, 0x6c, 0x42, 0x79, 0xe4, 0xf3, 0xe, 0x37, 0x86, 0x25, 0x24, 0xf8}}
	return a, nil
}

var __1555589937_create_domainsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x50\x4a\xc9\xcf\x4d\xcc\xcc\x2b\x56\xb2\x06\x04\x00\x00\xff\xff\xde\x49\xd2\xaf\x15\x00\x00\x00")

func _1555589937_create_domainsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1555589937_create_domainsDownSql,
		"1555589937_create_domains.down.sql",
	)
}

func _1555589937_create_domainsDownSql() (*asset, error) {
	bytes, err := _1555589937_create_domainsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1555589937_create_domains.down.sql", size: 21, mode: os.FileMode(0644), modTime: time.Unix(1555590133, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xee, 0x8d, 0x1d, 0x25, 0xa3, 0x7b, 0x22, 0x77, 0xe8, 0x9f, 0xb, 0xca, 0xe6, 0xc5, 0x8e, 0x2b, 0xa3, 0x9f, 0xcc, 0x60, 0xd9, 0xac, 0x27, 0xf4, 0x9b, 0x7c, 0x2f, 0xc1, 0xdc, 0x9b, 0x54, 0xf9}}
	return a, nil
}

var __1555589937_create_domainsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xca\x31\x0a\xc2\x30\x14\x06\xe0\xbd\xa7\xf8\xe9\xa4\xe0\x0d\x9c\xa2\xbe\x21\x18\xa3\x86\xbc\xa1\x93\x3c\x9a\x80\x19\x52\x4b\x12\x3d\xbf\xa0\xe0\x20\x74\xff\xf6\x8e\x94\x27\x78\xb5\x33\x84\x3e\x3c\xb2\xa4\xa9\xf6\x58\x75\x00\x90\x02\x98\xf5\x01\xf6\xec\x61\xd9\x18\x5c\x9c\x3e\x29\x37\xe0\x48\xc3\xe6\x23\x26\xc9\x11\x2f\x29\xe3\x5d\x0a\xd8\xea\x2b\xd3\x4f\x7f\xc5\x58\xa2\xb4\x18\x6e\xd2\xd0\x52\x8e\xb5\x49\x9e\xff\xc8\x73\x0e\xcb\xa4\x5b\x6f\xdf\x01\x00\x00\xff\xff\x28\xff\x76\x9e\xa4\x00\x00\x00")

func _1555589937_create_domainsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1555589937_create_domainsUpSql,
		"1555589937_create_domains.up.sql",
	)
}

func _1555589937_create_domainsUpSql() (*asset, error) {
	bytes, err := _1555589937_create_domainsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1555589937_create_domains.up.sql", size: 164, mode: os.FileMode(0644), modTime: time.Unix(1643463312, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb7, 0x60, 0x14, 0x6f, 0xe2, 0xe4, 0xa2, 0xad, 0xc7, 0xcb, 0x89, 0x42, 0xbc, 0xb9, 0xb4, 0xe4, 0xf9, 0x55, 0x7, 0xc5, 0xdf, 0x8d, 0x28, 0x40, 0xdb, 0x0, 0x99, 0x7b, 0x66, 0x8f, 0x1f, 0xbf}}
	return a, nil
}

var __1585465452_create_domain_usersDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x50\x2a\x2d\x4e\x2d\x8a\x4f\xc9\xcf\x4d\xcc\xcc\x53\xb2\x06\x04\x00\x00\xff\xff\xcf\x77\xdc\x89\x19\x00\x00\x00")

func _1585465452_create_domain_usersDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1585465452_create_domain_usersDownSql,
		"1585465452_create_domain_users.down.sql",
	)
}

func _1585465452_create_domain_usersDownSql() (*asset, error) {
	bytes, err := _1585465452_create_domain_usersDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1585465452_create_domain_users.down.sql", size: 25, mode: os.FileMode(0644), modTime: time.Unix(1605407458, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xeb, 0xe6, 0x59, 0xfe, 0x7e, 0x5a, 0xec, 0xd4, 0xe9, 0xe3, 0x83, 0x8e, 0xfe, 0x66, 0xe3, 0x65, 0xee, 0xa3, 0x20, 0x6e, 0xbe, 0x87, 0xbc, 0x30, 0x3a, 0x31, 0x52, 0xc3, 0x43, 0xa3, 0x22, 0xae}}
	return a, nil
}

var __1585465452_create_domain_usersUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\xc1\x6a\x84\x30\x14\x85\xe1\xbd\xe0\x3b\x1c\x5c\x29\xf8\x06\x5d\xa5\x35\x05\x69\x6a\x8b\x24\x0b\x57\x92\x9a\x2b\x04\x8c\x4a\x12\xdf\xbf\xa0\xb6\xce\x66\x86\xd9\x5e\xbe\xff\xdc\xb7\x96\x33\xc9\x21\xd9\xab\xe0\xc8\xb6\x40\xbe\x37\x8b\xd3\x76\xce\x90\xa7\x09\x00\xec\x37\x6b\xa0\x54\x5d\xa1\xf9\x92\x68\x94\x10\xf0\x34\x92\xa7\x79\xa0\xb0\x83\x90\x5b\x53\x94\x47\x70\xf4\x0f\x93\x83\xdc\x46\xdf\x6d\xfd\xc9\xda\x0e\x1f\xbc\xcb\xcf\x8f\xe5\xb5\xf4\xa7\xb4\x71\x76\xc6\xcf\xb2\x4c\xd7\x6c\xc5\xdf\x99\x12\x12\xa3\x9e\x02\x9d\x8e\x9c\xb6\xd3\x13\x6e\xf0\xa4\x23\x99\x5e\x47\x44\xeb\x28\x44\xed\xd6\xff\xe2\x34\xdb\x6a\xee\x9b\x34\x29\x5e\x7e\x03\x00\x00\xff\xff\x5d\x97\x37\x3a\x43\x01\x00\x00")

func _1585465452_create_domain_usersUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1585465452_create_domain_usersUpSql,
		"1585465452_create_domain_users.up.sql",
	)
}

func _1585465452_create_domain_usersUpSql() (*asset, error) {
	bytes, err := _1585465452_create_domain_usersUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1585465452_create_domain_users.up.sql", size: 323, mode: os.FileMode(0644), modTime: time.Unix(1643463345, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x14, 0x81, 0x6d, 0x79, 0xd, 0xab, 0xb1, 0x96, 0xa4, 0x2b, 0xd8, 0xf3, 0xa0, 0xf7, 0xf4, 0x34, 0xe, 0xe2, 0xc1, 0x72, 0xd, 0xed, 0xa3, 0xd8, 0x15, 0x5, 0x49, 0x6, 0xaf, 0xb, 0x6a, 0x12}}
	return a, nil
}

var __1643446918_add_email_usersDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x50\x4a\xc9\xcf\x4d\xcc\xcc\x8b\x4f\xcd\x4d\xcc\xcc\x89\x2f\x2d\x4e\x2d\x52\xb2\x06\x04\x00\x00\xff\xff\x5d\x6d\x19\xec\x1f\x00\x00\x00")

func _1643446918_add_email_usersDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1643446918_add_email_usersDownSql,
		"1643446918_add_email_users.down.sql",
	)
}

func _1643446918_add_email_usersDownSql() (*asset, error) {
	bytes, err := _1643446918_add_email_usersDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1643446918_add_email_users.down.sql", size: 31, mode: os.FileMode(0644), modTime: time.Unix(1643446955, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x65, 0x7b, 0xbc, 0xc6, 0x71, 0x87, 0x70, 0x7d, 0x59, 0xaa, 0x1c, 0x41, 0xed, 0x40, 0x9f, 0x84, 0x9, 0xcb, 0xcd, 0xd, 0x3b, 0x2b, 0xb6, 0xd3, 0x97, 0x28, 0x7d, 0x5f, 0xa7, 0x62, 0x3, 0x4c}}
	return a, nil
}

var __1643446918_add_email_usersUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\xbd\x4e\xc3\x40\x10\x84\xfb\x3c\xc5\x2a\x95\x23\xe5\x0d\xa8\x0c\x5c\x11\x61\x02\xb2\xec\x22\xd5\x69\xef\x76\x11\x27\xf9\x7e\xd8\x3d\x83\xf2\xf6\x08\x11\x0c\xc8\xca\xb4\xf3\x7d\x33\x77\xbd\x69\x07\x03\x43\x7b\xdb\x19\xd8\x52\x8e\x18\x92\xe5\x88\x61\xb2\xb3\xb2\x6c\xa1\xd9\xc0\x77\x2e\x5d\x20\x18\xc7\xc3\x3d\x1c\x9f\x06\x38\x8e\x5d\x07\xc2\x2f\x2c\x9c\x3c\xeb\x05\xd1\x26\xd0\x6e\xff\xa3\x39\x54\xb6\x48\x24\xac\x0a\xef\x28\xfe\x15\x65\x91\x17\xea\xb9\x3f\x3c\xb6\xfd\x09\x1e\xcc\xa9\x59\x8e\xf6\xff\xe4\xdf\x49\x4e\x5e\xce\xa5\x32\xd9\x82\xaa\x1f\x59\x08\xdc\xb9\x32\xfe\x01\xd0\x4d\x4c\xe0\x72\x9e\xd6\x5f\x6f\x73\xae\x08\x21\xd5\x75\xe5\x85\xf1\x6b\x17\x2b\xd4\x10\x59\x2b\xc6\xb2\xa6\xe6\x42\xd7\xa9\xcd\xee\xe6\x33\x00\x00\xff\xff\x83\xf1\x44\x01\x54\x01\x00\x00")

func _1643446918_add_email_usersUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1643446918_add_email_usersUpSql,
		"1643446918_add_email_users.up.sql",
	)
}

func _1643446918_add_email_usersUpSql() (*asset, error) {
	bytes, err := _1643446918_add_email_usersUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1643446918_add_email_users.up.sql", size: 340, mode: os.FileMode(0644), modTime: time.Unix(1643463355, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x84, 0xe9, 0x32, 0x7b, 0x63, 0x29, 0xe6, 0x3e, 0xf5, 0xe4, 0x8c, 0x46, 0x8b, 0xa7, 0xbf, 0xe6, 0x18, 0x62, 0x8d, 0xa4, 0xe6, 0xd1, 0x82, 0x36, 0xd8, 0x86, 0x8b, 0x83, 0x2a, 0x65, 0xcb, 0xaf}}
	return a, nil
}

var __1732505546_add_email_aliasesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x50\x4a\xc9\xcf\x4d\xcc\xcc\x8b\x4f\xcd\x4d\xcc\xcc\x89\x4f\xcc\xc9\x4c\x2c\x56\xb2\x06\x04\x00\x00\xff\xff\xf1\xc2\x0c\x66\x20\x00\x00\x00")

func _1732505546_add_email_aliasesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1732505546_add_email_aliasesDownSql,
		"1732505546_add_email_aliases.down.sql",
	)
}

func _1732505546_add_email_aliasesDownSql() (*asset, error) {
	bytes, err := _1732505546_add_email_aliasesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1732505546_add_email_aliases.down.sql", size: 32, mode: os.FileMode(0644), modTime: time.Unix(1732505679, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x29, 0x81, 0xf4, 0x12, 0x62, 0x38, 0x5f, 0xe8, 0xda, 0x77, 0xf9, 0xed, 0x2a, 0x79, 0xe1, 0x84, 0xcd, 0x1b, 0x38, 0xe, 0xf7, 0x2b, 0x61, 0x22, 0x2d, 0xfe, 0x20, 0x73, 0x6, 0x2c, 0x5d, 0x1}}
	return a, nil
}

var __1732505546_add_email_aliasesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8c\xcd\x6a\x83\x40\x10\x80\xef\x3e\xc5\xe0\x49\xc1\x37\xe8\xc9\xb6\x7b\x90\x5a\x5b\x44\x0f\x52\x8a\x0c\xce\x94\x0e\xb8\xab\xec\x4c\x42\x1e\x3f\x90\x18\x0f\x42\xce\xdf\xcf\x5b\xeb\xca\xce\x41\x57\xbe\xd6\x0e\x52\x5a\x3c\x4a\x18\xd9\xa3\xcc\x23\xce\x82\x9a\x42\x96\x00\x00\x6c\x44\x08\xfa\xbe\x7a\x87\xe6\xab\x83\xa6\xaf\x6b\x88\xfc\xc7\x91\xc3\xc4\xba\x29\x9a\x09\xe5\xc5\xad\x41\xa2\xc8\xaa\x70\xc6\x38\xfd\x63\xdc\xa3\x3b\xfd\x6e\xab\xcf\xb2\x1d\xe0\xc3\x0d\xd9\x7e\x2f\x1e\xd1\xb6\x20\x56\x93\x80\x26\x4b\x50\x30\xbe\xd8\xcf\xef\x61\x33\x45\x46\x63\x1a\xd1\xc0\xc4\xb3\x1a\xfa\xf5\xa0\x9c\x56\x7a\xae\x24\xf9\xcb\x35\x00\x00\xff\xff\xb1\xa9\x94\x7b\x04\x01\x00\x00")

func _1732505546_add_email_aliasesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1732505546_add_email_aliasesUpSql,
		"1732505546_add_email_aliases.up.sql",
	)
}

func _1732505546_add_email_aliasesUpSql() (*asset, error) {
	bytes, err := _1732505546_add_email_aliasesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1732505546_add_email_aliases.up.sql", size: 260, mode: os.FileMode(0644), modTime: time.Unix(1732506719, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3d, 0xdc, 0xa7, 0x3a, 0xb8, 0x8c, 0xdd, 0xda, 0x34, 0xa2, 0x34, 0x24, 0xc8, 0x29, 0xe9, 0xb1, 0xad, 0xf1, 0x89, 0xe3, 0xf2, 0x9e, 0x19, 0x6, 0xbe, 0xc9, 0xe8, 0xd1, 0xd5, 0x5a, 0xcb, 0x57}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1555589258_create_users.down.sql":        _1555589258_create_usersDownSql,
	"1555589258_create_users.up.sql":          _1555589258_create_usersUpSql,
	"1555589937_create_domains.down.sql":      _1555589937_create_domainsDownSql,
	"1555589937_create_domains.up.sql":        _1555589937_create_domainsUpSql,
	"1585465452_create_domain_users.down.sql": _1585465452_create_domain_usersDownSql,
	"1585465452_create_domain_users.up.sql":   _1585465452_create_domain_usersUpSql,
	"1643446918_add_email_users.down.sql":     _1643446918_add_email_usersDownSql,
	"1643446918_add_email_users.up.sql":       _1643446918_add_email_usersUpSql,
	"1732505546_add_email_aliases.down.sql":   _1732505546_add_email_aliasesDownSql,
	"1732505546_add_email_aliases.up.sql":     _1732505546_add_email_aliasesUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1555589258_create_users.down.sql":        {_1555589258_create_usersDownSql, map[string]*bintree{}},
	"1555589258_create_users.up.sql":          {_1555589258_create_usersUpSql, map[string]*bintree{}},
	"1555589937_create_domains.down.sql":      {_1555589937_create_domainsDownSql, map[string]*bintree{}},
	"1555589937_create_domains.up.sql":        {_1555589937_create_domainsUpSql, map[string]*bintree{}},
	"1585465452_create_domain_users.down.sql": {_1585465452_create_domain_usersDownSql, map[string]*bintree{}},
	"1585465452_create_domain_users.up.sql":   {_1585465452_create_domain_usersUpSql, map[string]*bintree{}},
	"1643446918_add_email_users.down.sql":     {_1643446918_add_email_usersDownSql, map[string]*bintree{}},
	"1643446918_add_email_users.up.sql":       {_1643446918_add_email_usersUpSql, map[string]*bintree{}},
	"1732505546_add_email_aliases.down.sql":   {_1732505546_add_email_aliasesDownSql, map[string]*bintree{}},
	"1732505546_add_email_aliases.up.sql":     {_1732505546_add_email_aliasesUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
