// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../templates/ios-email-profile-error.html (149B)
// ../templates/ios-email-profile.xml (3.684kB)

package templateData

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _iosEmailProfileErrorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xce\x31\x0a\x02\x41\x0c\x85\xe1\x7e\x4e\xf1\x2e\xa0\xd3\x4b\x98\xc6\xc6\xce\x42\x2f\xb0\x92\xe8\x06\x66\x27\x12\xa3\x28\xcb\xde\x5d\xd8\xd1\xfa\xf1\x3d\x7e\x1a\x63\xaa\x25\xd1\x28\x03\x97\x04\x00\x14\x1a\x55\xca\xc1\x1e\x31\xf0\xa4\x0d\x1b\xe8\xf1\x84\xbb\xdb\x55\xab\x50\xee\x73\xa2\xdc\x09\x5d\x8c\x3f\x25\x11\xeb\xab\xfb\xbd\x3d\x2b\xa3\x59\xe0\x26\x4d\x7c\x08\xf9\xdb\x1d\xe6\x19\x5b\x71\x37\x3f\xcb\x3b\xb0\x2c\x89\xf2\xea\x28\xff\x5e\xf2\x9a\xf3\x0d\x00\x00\xff\xff\x95\xaf\xb1\x05\x95\x00\x00\x00")

func iosEmailProfileErrorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_iosEmailProfileErrorHtml,
		"ios-email-profile-error.html",
	)
}

func iosEmailProfileErrorHtml() (*asset, error) {
	bytes, err := iosEmailProfileErrorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ios-email-profile-error.html", size: 149, mode: os.FileMode(0644), modTime: time.Unix(1732937407, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x70, 0x77, 0xf, 0xd6, 0xbd, 0x69, 0x8f, 0x1f, 0x90, 0xc6, 0x52, 0xa5, 0x6e, 0x4b, 0x9a, 0x20, 0xdc, 0x7f, 0x15, 0x73, 0x60, 0x56, 0xf4, 0x2e, 0x23, 0xa, 0x8b, 0xa, 0x24, 0x7f, 0xe1, 0x1a}}
	return a, nil
}

var _iosEmailProfileXml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x97\xef\x8f\xa2\x38\x18\xc7\xdf\xcf\x5f\xd1\xf3\x3d\x54\x1c\x1d\xf5\xc2\x99\x03\x61\xb3\x26\xe3\x0c\x59\xf4\x92\x7b\xd9\x85\x47\x6c\x16\x5a\xd2\x16\x8d\xb7\xf1\x7f\xbf\x80\x70\xbb\x8b\x22\x38\xe3\xcd\x3b\x31\xed\xe7\xfb\xb4\x7c\x9f\x1f\x98\xbf\x39\xaf\xf3\xd5\xdf\x9e\x8b\xd2\x98\x4a\x85\xbc\xb5\xfd\xbc\x98\xa3\x9e\x86\xb1\x95\xa6\x31\x60\xec\xac\x1c\xe4\x3d\x2f\xfc\x15\x32\xf4\x3e\xc6\xee\x4b\x0f\xf5\xb6\x4a\xa5\xbf\x63\xbc\xdf\xef\x75\x92\xaf\xd2\x03\x9e\xe4\x0b\x25\xf6\x04\x4f\x41\xa8\xc3\x33\x95\x4a\x33\xf4\xbe\x1e\xaa\xb0\x37\x7b\x30\x4f\xf4\x1d\x08\x49\x39\xfb\xa3\x67\xe8\xfd\xde\xec\x01\x21\x84\xcc\x90\x06\xea\xf4\xb3\x78\xfc\x06\x87\xd9\x67\x22\xbf\x40\xc2\x77\x24\xf6\x88\x94\x01\x0f\xc1\xc4\xf9\xff\x3f\x56\x6d\x48\x2c\x01\xd7\xb6\x79\xe4\x10\x73\x12\xce\x39\x53\xc0\x54\x7d\x0b\x11\x82\xfc\xf4\x7c\x41\xfb\x17\x98\x9b\x10\x1a\x5b\x41\xc0\x33\xa6\x1c\x90\x81\xa0\xa9\xa2\x9c\xd5\xa8\xff\x6d\x91\x4a\x50\x16\xcd\xbe\x7f\x47\x7a\x26\x41\xe8\x36\x91\x60\x85\xa1\x00\x29\xd1\xf1\xf8\x67\xfe\x7f\xc8\x13\x42\x99\xfe\x42\x12\x40\xc7\xa3\x89\xcb\x2d\xed\xf2\xab\x43\x5a\xbf\x80\xba\x6e\xb1\x3c\x5f\xb7\x58\x5a\x5e\x27\xf4\x29\xb6\x8f\x3a\xce\x82\x05\x3c\xa1\x2c\x5a\x12\x1a\xfb\x20\x76\x20\xac\x4c\x6d\x81\x29\x1a\x90\x0e\xd7\x7a\x0a\x39\x53\xdb\xdc\x0f\x7b\x2e\xc2\x9b\xe5\x3e\x73\xa9\xf2\x50\x5b\x84\x18\xec\x73\x29\x5d\xc2\x37\xc5\x85\x84\x1d\x30\x9d\x81\xba\x59\xce\xe3\x42\xbd\x64\xc9\x57\x10\x4d\x82\x94\x29\x88\x40\xcc\xa6\xd3\x47\x13\x57\x0f\x5d\xf1\x6b\x09\xbe\xff\xdc\x84\x56\x22\xfb\x39\x37\xda\x59\x82\xb5\xdf\xcc\xdd\xad\xf0\xe3\x55\xb6\xea\xa6\xe5\xd2\x76\xf8\x6b\xa6\x22\xfe\x71\x3e\x3b\x97\xfb\x5f\x7d\x76\x2e\xd7\xdd\x67\xa3\xc9\xb8\xcd\x67\xe7\xf8\xb7\xfb\xec\x22\xeb\x43\x7d\x56\x45\x50\xbd\x4a\x9f\x24\x60\xc9\xae\xee\xbb\x76\xb6\xb2\xcf\x74\xef\x0a\x73\xce\x36\x34\xca\x04\x48\x54\x38\x0c\x49\x50\x8a\xb2\x48\xb6\x1c\xa1\x12\xa2\x32\x8d\xc9\xa1\x83\xad\xee\x76\x79\xa5\xf2\x22\xcc\x53\x67\x43\x9b\xed\x55\x52\x02\x9e\x94\x93\x40\x61\xeb\x84\x30\x12\x41\xa8\x8f\xa7\xee\x64\x6e\x38\x03\xed\xd3\xc4\x9d\x6a\xc3\x41\xff\x49\xb3\xad\xa1\xab\x3d\x1a\x4f\x23\x63\xfc\x34\x74\x87\xee\xa0\x5b\x24\x1d\x7a\xe0\xe5\x18\xba\xe1\xd7\xeb\x85\xd3\x82\xbf\xdf\x59\xfe\x3a\x4d\x41\x6d\x19\x6b\xb4\xe5\xab\xbf\x5c\x2c\x5d\x97\x91\xaf\x31\x78\x20\x96\x20\x25\x89\xc0\xdf\x53\x15\x6c\x9b\xd8\xf5\xb9\xa9\x89\xd7\x98\x17\x5d\x00\x81\x38\x14\x59\xf1\x6e\x94\x4f\x23\x46\x59\xf4\x1e\x0e\x89\x63\xbe\xcf\x8b\x90\x23\x78\xfa\x26\x42\x48\x65\x2e\x9f\x33\xbe\x40\x00\x4c\x49\xff\xc0\x02\xca\xa2\x5b\x68\x26\xae\x8d\xb9\xb8\x36\x8e\x76\x2b\x2c\xbf\xf4\x29\xe4\x09\xbe\xa1\x31\xa0\x0d\x17\xe8\x3d\x99\xdf\xad\xd6\xdc\x5e\x63\x90\x86\xfc\x31\x72\xb5\xfc\xea\xae\xab\x36\xd6\x99\x4a\x54\x8e\x35\xc8\xcf\xac\xdd\xeb\x9c\xaf\x22\x22\x8c\xfe\x73\x69\x28\xa8\x34\xfd\xa2\x37\xfb\x79\x6f\xbe\xce\x2a\xbf\x55\x1c\x2a\x0b\xb7\x9d\x39\xf5\xea\xd7\xca\x85\xc2\x56\x6f\x1b\x65\x90\xd7\x42\xb8\x50\xbf\x2a\x8a\x35\x1d\x18\xee\x60\x68\x6b\xc6\x63\x7f\xa8\x0d\xa7\xb6\xa3\x4d\x3e\x4d\x06\x9a\x6d\xd9\xa3\x51\xdf\x78\x74\xed\xd1\xfc\x3a\xfc\x72\xbd\x6a\xac\x53\x95\xd7\x4d\x5c\x7c\xf4\xcd\x1e\xfe\x0d\x00\x00\xff\xff\x8d\x6e\xfc\xc5\x64\x0e\x00\x00")

func iosEmailProfileXmlBytes() ([]byte, error) {
	return bindataRead(
		_iosEmailProfileXml,
		"ios-email-profile.xml",
	)
}

func iosEmailProfileXml() (*asset, error) {
	bytes, err := iosEmailProfileXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ios-email-profile.xml", size: 3684, mode: os.FileMode(0644), modTime: time.Unix(1732968292, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x46, 0xfa, 0x85, 0x8c, 0x2c, 0x30, 0x9a, 0xbc, 0xea, 0x3, 0xd3, 0x40, 0x9a, 0xeb, 0x14, 0x39, 0x6e, 0x32, 0xe, 0x9e, 0xca, 0xa1, 0x97, 0x77, 0xb3, 0xb4, 0xc2, 0xba, 0x78, 0xb3, 0xd3, 0xde}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ios-email-profile-error.html": iosEmailProfileErrorHtml,
	"ios-email-profile.xml":        iosEmailProfileXml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ios-email-profile-error.html": &bintree{iosEmailProfileErrorHtml, map[string]*bintree{}},
	"ios-email-profile.xml":        &bintree{iosEmailProfileXml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
